// <auto-generated />
using System;
using Application.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Application.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    partial class LibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Application.Database.Books.BookModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Mihail Sadoveanu",
                            Stock = 99,
                            Title = "Baltagul"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Marin Preda",
                            Stock = 99,
                            Title = "Moromeții"
                        },
                        new
                        {
                            Id = 3,
                            Author = "George Călinescu",
                            Stock = 99,
                            Title = "Enigma Otiliei"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Liviu Rebreanu",
                            Stock = 99,
                            Title = "Ion"
                        },
                        new
                        {
                            Id = 5,
                            Author = "Camil Petrescu",
                            Stock = 99,
                            Title = "Ultima noapte de dragoste, întâia noapte de război"
                        },
                        new
                        {
                            Id = 6,
                            Author = "Ion Creangă",
                            Stock = 99,
                            Title = "Amintiri din copilărie"
                        },
                        new
                        {
                            Id = 7,
                            Author = "Mateiu Caragiale",
                            Stock = 99,
                            Title = "Craii de Curtea-Veche"
                        },
                        new
                        {
                            Id = 8,
                            Author = "Liviu Rebreanu",
                            Stock = 99,
                            Title = "Pădurea spânzuraților"
                        },
                        new
                        {
                            Id = 9,
                            Author = "Mircea Eliade",
                            Stock = 99,
                            Title = "Scrinul negru"
                        },
                        new
                        {
                            Id = 10,
                            Author = "Marin Preda",
                            Stock = 99,
                            Title = "Cel mai iubit dintre pământeni"
                        });
                });

            modelBuilder.Entity("Application.Database.ReaderBooks.ReaderBookModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PickUpDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReaderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("datetime2(3)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("ReaderId");

                    b.ToTable("ReaderBooks");
                });

            modelBuilder.Entity("Application.Database.Readers.ReaderModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BooksBorrowed")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Readers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BooksBorrowed = 0,
                            Email = "andrei@gmail.com",
                            Name = "Andrei Durac"
                        },
                        new
                        {
                            Id = 2,
                            BooksBorrowed = 0,
                            Email = "maria@yahoo.com",
                            Name = "Maria Ignat"
                        },
                        new
                        {
                            Id = 3,
                            BooksBorrowed = 0,
                            Email = "ion.calinescu01@hotmail.com",
                            Name = "Ion Calinescu"
                        },
                        new
                        {
                            Id = 4,
                            BooksBorrowed = 0,
                            Email = "elena.lasconi@gmail.com",
                            Name = "Elena Lasconi"
                        },
                        new
                        {
                            Id = 5,
                            BooksBorrowed = 0,
                            Email = "MazareMih@yahoo.com",
                            Name = "Mihai Mazare"
                        },
                        new
                        {
                            Id = 6,
                            BooksBorrowed = 0,
                            Email = "anaxyz@gmail.com",
                            Name = "Ana Ungureanu"
                        },
                        new
                        {
                            Id = 7,
                            BooksBorrowed = 0,
                            Email = "branzescu@gmail.com",
                            Name = "Cristian Branzescu"
                        },
                        new
                        {
                            Id = 8,
                            BooksBorrowed = 0,
                            Email = "ioana001@gmail.com",
                            Name = "Ioana Dumitrascu"
                        },
                        new
                        {
                            Id = 9,
                            BooksBorrowed = 0,
                            Email = "vlade999@yahoo.com",
                            Name = "Vlad Ene"
                        },
                        new
                        {
                            Id = 10,
                            BooksBorrowed = 0,
                            Email = "agache.dianamxn@gmail.com",
                            Name = "Diana Agache"
                        });
                });

            modelBuilder.Entity("Application.Database.ReaderBooks.ReaderBookModel", b =>
                {
                    b.HasOne("Application.Database.Books.BookModel", "Book")
                        .WithMany("Readers")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Database.Readers.ReaderModel", "Reader")
                        .WithMany("ReaderBooks")
                        .HasForeignKey("ReaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("Application.Database.Books.BookModel", b =>
                {
                    b.Navigation("Readers");
                });

            modelBuilder.Entity("Application.Database.Readers.ReaderModel", b =>
                {
                    b.Navigation("ReaderBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
